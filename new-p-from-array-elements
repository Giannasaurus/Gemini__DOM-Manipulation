/* Create a function that takes an array of strings as input. For each string in the array, dynamically create a <p> element and set its text content to the corresponding string. Append these <p> elements to a specified container element in the HTML document.

<!DOCTYPE html>
<html>
<head>
  <title>Dynamic Element Creation with Content</title>
</head>
<body>
  <div id="container"></div>
  <script src="script.js"></script>
</body>
</html> */

/* 
Hints:
Use a loop to iterate through the array of strings.
Create a <p> element for each string using document.createElement("p").
Set the text content of the <p> element using the textContent property.
Append the created <p> elements to the specified container element. */



```
const pContent = ["this", "is", "a", "paragraph", "content"];

function appendStringToP() {
  for (let i = 0; i < pContent.length; i++) {
    const newP = document.createElement("p");
    newP.textContent = pContent[i];
    document.body.appendChild(newP);
  }
}
appendStringToP();
```



/* 
Explanation of the changes: // from original answer
- `let` keyword: Using `let` for the loop variable `i` is generally considered better practice in modern JavaScript as it creates block-scoped variables.
- Separate `createElement` and `textContent` assignment: The `document.createElement("p")` creates the `<p>` element, and then `newP.textContent = pContent[i];` sets its text content. Combining these into a single expression can sometimes lead to unexpected results.
